unit itmunit;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Dialogs,
  D7ScktComp, syncobjs, MudUtil, HUtil32, Grobal2, Math;

type
   TItemUnit = class
   private
   public
      function  GetUpgrade (count, ran: integer): integer;
      function  GetUpgrade2 (x, a: integer): integer;
      procedure UpgradeRandomWeapon (pu: PTUserItem); //¹«±â¸¦ ·£´ýÇÏ°Ô ¾÷±×·¹ÀÌµå ÇÑ´Ù.
      procedure UpgradeRandomDress (pu: PTUserItem);  //¿ÊÀ» ·£´ýÇÏ°Ô ¾÷±×·¹ÀÌµåÇÔ.
      procedure UpgradeRandomNecklace (pu: PTUserItem);
      procedure UpgradeRandomBarcelet (pu: PTUserItem);
      procedure UpgradeRandomNecklace19 (pu: PTUserItem);
      procedure UpgradeRandomRings (pu: PTUserItem);
      procedure UpgradeRandomRings23 (pu: PTUserItem);
      procedure UpgradeRandomHelmet (pu: PTUserItem);

      procedure RandomSetUnknownHelmet (pu: PTUserItem);
      procedure RandomSetUnknownRing (pu: PTUserItem);
      procedure RandomSetUnknownBracelet (pu: PTUserItem);

      function GetUpgradeStdItem (ui: TUserItem; var std: TStdItem):integer;

      //°ø¼Ó º¯È¯ ÇÔ¼ö
      function RealAttackSpeed( wAtkSpd: WORD ): integer;   //-10~15ÀÇ °ªÀ» °®´Â ½ÇÁ¦ °ø¼Ó
      function NaturalAttackSpeed( iAtkSpd: integer ): WORD;   //0 ÀÌ»óÀÇ °ªÀ» °®´Â °ø¼Ó°ª
      function GetAttackSpeed( bStdAtkSpd, bUserAtkSpd: BYTE ): BYTE;
      function UpgradeAttackSpeed( bUserAtkSpd: BYTE; iUpValue: integer ): BYTE;

   end;

implementation

uses
   svMain;


function  TItemUnit.GetUpgrade (count, ran: integer): integer;
var
   i: integer;
begin
   Result := 0;
   for i:=0 to count-1 do begin
      if Random(ran) = 0 then Result := Result + 1
      else break;
   end;
end;

function  TItemUnit.GetUpgrade2 (x, a: integer): integer;
var
   i: integer;
   iProb : integer;
begin
   Result := 0;
//   Result := Trunc(Sqrt(10000 - Power(x+a, 2)) / (100 + Power(x, 2)));
//   iProb := Trunc((Sqrt(10000 - Power(x+a, 2)) / (100 + Power(x, 2))) * 100);
   for i:=x downto 1 do begin
      if i > x div 2 then begin
         //È®·üÀÌ ³·Àº °Å Àû¿ë
         iProb := Trunc((Sqrt(Power(a, 2) - Power(i, 2)) / (a * i + Power(i, 2))) * 100);
      end else begin
         //È®·üÀÌ ³ôÀº °Å Àû¿ë
         iProb := Trunc( (Sqrt(1 - (Power(i, 2) / Power(a, 2))) * 100) / sqrt(i) );
      end;
        if Random(650) < iProb then begin        //ÉñÃØ×°±¸¼«Æ·¼¸ÂÊ£¬Êý×ÖÔ½Ð¡¼¸ÂÊÔ½´ó  Ô­À´ÊÇ500
         Result := i{x} div 3;
         break;
      end;
   end;

{
   Result := 0;
//   Result := Trunc(Sqrt(10000 - Power(x+a, 2)) / (100 + Power(x, 2)));
//   iProb := Trunc((Sqrt(10000 - Power(x+a, 2)) / (100 + Power(x, 2))) * 100);
   for i:=x downto 1 do begin
      iProb := Trunc((Sqrt(Power(a, 2) - Power(x, 2)) / (a * x + Power(x, 2))) * 100);
      if Random(100) < iProb then begin
//         Result := x div 3;
         Result := i div 3;
         break;
      end;
   end;
}
end;

//ÆÄ¶ó¸ÞÅÍ pu´Â ¹Ýµå½Ã ¹«±âÀÌ´Ù.
//TUserItemÀÇ DescÀÇ ¾÷±×·¹ÀÌµå ¸Ê 0:DC 1:MC 2:SC
procedure TItemUnit.UpgradeRandomWeapon (pu: PTUserItem);
var
   up, n, i, incp: integer;
begin
   //ÆÄ±« ¿É¼Ç
   up := GetUpgrade (12, 15);
   if Random(15) = 0 then pu.Desc[0] := 1+up; //DC

   //°ø°Ý¼Óµµ
   up := GetUpgrade (12, 15);
   if Random(20) = 0 then begin  //°ø°Ý ¼Óµµ
      incp := (1+up) div 3;  //Àß ¾È ºÙµµ·Ï
      if incp > 0 then begin
         if Random(3) <> 0 then  pu.Desc[6] := incp  //°ø°Ý¼Óµµ (-)
         else pu.Desc[6] := 10 + incp;  //°ø°Ý¼Óµµ (+)
      end;
   end;

   //¸¶·Â
   up := GetUpgrade (12, 15);
   if Random(15) = 0 then pu.Desc[1] := 1+up; //MC

   //µµ·Â
   up := GetUpgrade (12, 15);
   if Random(15) = 0 then pu.Desc[2] := 1+up; //SC

   //Á¤È®
   up := GetUpgrade (12, 15);
   if Random(24) = 0 then pu.Desc[5] := 1 + (up div 2); //Á¤È®(+)

   //³»±¸
   up := GetUpgrade (12, 12);
   if Random(3) < 2 then begin
      n := (1+up)*2000;
      pu.DuraMax := _MIN(65000, integer(pu.DuraMax) + n);
      pu.Dura := _MIN(65000, integer(pu.Dura) + n);
   end;

   //°­µµ
   up := GetUpgrade (12, 15);
   if Random(10) = 0 then
      pu.Desc[7] := 1 + (up div 2); //¹«±âÀÇ ´Ü´ÜÇÔ Á¤µµ

end;

procedure TItemUnit.UpgradeRandomDress (pu: PTUserItem);
var
   i, n, up: integer;
begin
   //¹æ¾î
   up := GetUpgrade (6, 15);
   if Random(30) = 0 then pu.Desc[0] := 1+up; //AC

   //¸¶Ç×
   up := GetUpgrade (6, 15);
   if Random(30) = 0 then pu.Desc[1] := 1+up; //MAC

   //ÆÄ±«
   up := GetUpgrade (6, 20);
   if Random(40) = 0 then pu.Desc[2] := 1+up; //DC

   //¸¶¹ý
   up := GetUpgrade (6, 20);
   if Random(40) = 0 then pu.Desc[3] := 1+up; //MC

   //µµ·Â
   up := GetUpgrade (6, 20);
   if Random(40) = 0 then pu.Desc[4] := 1+up; //SC

   //³»±¸
   up := GetUpgrade (6, 10);
   if Random(8) < 6 then begin
      n := (1+up)*2000;
      pu.DuraMax := _MIN(65000, integer(pu.DuraMax) + n);
      pu.Dura := _MIN(65000, integer(pu.Dura) + n);
   end;
end;


procedure TItemUnit.UpgradeRandomNecklace (pu: PTUserItem);
var
   i, n, up: integer;
begin
   //Á¤È®
   up := GetUpgrade (6, 30);
   if Random(60) = 0 then pu.Desc[0] := 1+up; //AC(HIT)

   //¹ÎÃ¸
   up := GetUpgrade (6, 30);
   if Random(60) = 0 then pu.Desc[1] := 1+up; //MAC(SPEED)

   //ÆÄ±«
   up := GetUpgrade (6, 20);
   if Random(30) = 0 then pu.Desc[2] := 1+up; //DC

   //¸¶¹ý
   up := GetUpgrade (6, 20);
   if Random(30) = 0 then pu.Desc[3] := 1+up; //MC

   //µµ·Â
   up := GetUpgrade (6, 20);
   if Random(30) = 0 then pu.Desc[4] := 1+up; //SC

   //³»±¸
   up := GetUpgrade (6, 12);
   if Random(20) < 15 then begin  //³»±¸
      n := (1+up)*1000;
      pu.DuraMax := _MIN(65000, integer(pu.DuraMax) + n);
      pu.Dura := _MIN(65000, integer(pu.Dura) + n);
   end;
end;

procedure TItemUnit.UpgradeRandomBarcelet (pu: PTUserItem);
var
   i, n, up: integer;
begin
   //¹æ¾î
   up := GetUpgrade (6, 20);
   if Random(20) = 0 then pu.Desc[0] := 1+up; //AC

   //¸¶Ç×
   up := GetUpgrade (6, 20);
   if Random(20) = 0 then pu.Desc[1] := 1+up; //MAC

   //ÆÄ±«
   up := GetUpgrade (6, 20);
   if Random(30) = 0 then pu.Desc[2] := 1+up; //DC

   //¸¶¹ý
   up := GetUpgrade (6, 20);
   if Random(30) = 0 then pu.Desc[3] := 1+up; //MC

   //µµ·Â
   up := GetUpgrade (6, 20);
   if Random(30) = 0 then pu.Desc[4] := 1+up; //SC

   //³»±¸
   up := GetUpgrade (6, 12);
   if Random(20) < 15 then begin  //³»±¸
      n := (1+up)*1000;
      pu.DuraMax := _MIN(65000, integer(pu.DuraMax) + n);
      pu.Dura := _MIN(65000, integer(pu.Dura) + n);
   end;
end;

procedure TItemUnit.UpgradeRandomNecklace19 (pu: PTUserItem);
var
   i, n, up: integer;
begin
   //¸¶¹ýÈ¸ÇÇ
   up := GetUpgrade (6, 20);
   if Random(40) = 0 then pu.Desc[0] := 1+up; //¸¶¹ýÈ¸ÇÇ

   //Çà¿î
   up := GetUpgrade (6, 20);
   if Random(40) = 0 then pu.Desc[1] := 1+up; //Çà¿î

   //ÆÄ±«
   up := GetUpgrade (6, 20);
   if Random(30) = 0 then pu.Desc[2] := 1+up; //DC

   //¸¶¹ý
   up := GetUpgrade (6, 20);
   if Random(30) = 0 then pu.Desc[3] := 1+up; //MC

   //µµ·Â
   up := GetUpgrade (6, 20);
   if Random(30) = 0 then pu.Desc[4] := 1+up; //SC

   //³»±¸
   up := GetUpgrade (6, 10);
   if Random(4) < 3 then begin //³»±¸¼º ¾÷±×·¹ÀÌµå
      n := (1+up)*1000;
      pu.DuraMax := _MIN(65000, integer(pu.DuraMax) + n);
      pu.Dura := _MIN(65000, integer(pu.Dura) + n);
   end;
end;

procedure TItemUnit.UpgradeRandomRings (pu: PTUserItem);
var
   i, n, up: integer;
begin
   //ÆÄ±«
   up := GetUpgrade (6, 20);
   if Random(30) = 0 then pu.Desc[2] := 1+up; //DC

   //¸¶·Â
   up := GetUpgrade (6, 20);
   if Random(30) = 0 then pu.Desc[3] := 1+up; //MC

   //µµ·Â
   up := GetUpgrade (6, 20);
   if Random(30) = 0 then pu.Desc[4] := 1+up; //SC

   //³»±¸
   up := GetUpgrade (6, 12);
   if Random(4) < 3 then begin //³»±¸¼º ¾÷±×·¹ÀÌµå
      n := (1+up)*1000;
      pu.DuraMax := _MIN(65000, integer(pu.DuraMax) + n);
      pu.Dura := _MIN(65000, integer(pu.Dura) + n);
   end;
end;

procedure TItemUnit.UpgradeRandomRings23 (pu: PTUserItem);
var
   i, n, up: integer;
begin
   //Áßµ¶ÀúÇ×
   up := GetUpgrade (6, 20);
   if Random(40) = 0 then pu.Desc[0] := 1+up; //Áßµ¶ÀúÇ×

   //Áßµ¶È¸º¹
   up := GetUpgrade (6, 20);
   if Random(40) = 0 then pu.Desc[1] := 1+up; //Áßµ¶È¸º¹

   //ÆÄ±«
   up := GetUpgrade (6, 20);
   if Random(30) = 0 then pu.Desc[2] := 1+up; //DC

   //¸¶·Â
   up := GetUpgrade (6, 20);
   if Random(30) = 0 then pu.Desc[3] := 1+up; //MC

   //µµ·Â
   up := GetUpgrade (6, 20);
   if Random(30) = 0 then pu.Desc[4] := 1+up; //SC

   //³»±¸
   up := GetUpgrade (6, 12);
   if Random(4) < 3 then begin
      n := (1+up)*1000;
      pu.DuraMax := _MIN(65000, integer(pu.DuraMax) + n);
      pu.Dura := _MIN(65000, integer(pu.Dura) + n);
   end;
end;

procedure TItemUnit.UpgradeRandomHelmet (pu: PTUserItem);
var
   i, n, up: integer;
begin
   //¹æ¾î
   up := GetUpgrade (6, 20);
   if Random(40) = 0 then pu.Desc[0] := 1+up; //AC

   //¸¶Ç×
   up := GetUpgrade (6, 20);
   if Random(30) = 0 then pu.Desc[1] := 1+up; //MAC

   //ÆÄ±«
   up := GetUpgrade (6, 20);
   if Random(30) = 0 then pu.Desc[2] := 1+up; //DC

   //¸¶¹ý
   up := GetUpgrade (6, 20);
   if Random(30) = 0 then pu.Desc[3] := 1+up; //MC

   //µµ·Â
   up := GetUpgrade (6, 20);
   if Random(30) = 0 then pu.Desc[4] := 1+up; //SC

   //³»±¸
   up := GetUpgrade (6, 12);
   if Random(4) < 3 then begin
      n := (1+up)*1000;
      pu.DuraMax := _MIN(65000, integer(pu.DuraMax) + n);
      pu.Dura := _MIN(65000, integer(pu.Dura) + n);
   end;
end;

//-------------------------------------------------------------
// ¹ÌÁöÀÇ ¾ÆÀÌÅÛ (Åõ±¸)

//Åõ±¸
procedure TItemUnit.RandomSetUnknownHelmet (pu: PTUserItem);
var
   i, n, up, sum: integer;
begin
   //¹æ¾î
//   up := GetUpgrade (4, 3) + GetUpgrade (4, 8) + GetUpgrade (4, 20);
   up := GetUpgrade2 (12, 13) + GetUpgrade2 (9, 10);
   if up > 0 then pu.Desc[0] := up; //AC
   sum := up;

   //¸¶Ç×
//   up := GetUpgrade (4, 3) + GetUpgrade (4, 8) + GetUpgrade (4, 20);
   up := GetUpgrade2 (9, 10);
   if up > 0 then pu.Desc[1] := up; //MAC
   sum := sum + up;

   //ÆÄ±«
//   up := GetUpgrade (3, 15) + GetUpgrade (3, 30);
   up := GetUpgrade2 (6, 7);
   if up > 0 then pu.Desc[2] := up; //DC
   sum := sum + up;

   //¸¶¹ý
//   up := GetUpgrade (3, 15) + GetUpgrade (3, 30);
   up := GetUpgrade2 (6, 7);
   if up > 0 then pu.Desc[3] := up; //MC
   sum := sum + up;

   //µµ·Â
//   up := GetUpgrade (3, 15) + GetUpgrade (3, 30);
   up := GetUpgrade2 (6, 7);
   if up > 0 then pu.Desc[4] := up; //SC
   sum := sum + up;

   //³»±¸
   up := GetUpgrade (6, 30);
   if up > 0 then begin
      n := (1+up)*1000;
      pu.DuraMax := _MIN(65000, integer(pu.DuraMax) + n);
      pu.Dura := _MIN(65000, integer(pu.Dura) + n);
   end;

   //¶³¾îÁöÁö ¾Ê´Â ¾ÆÀÌÅÛ
   if Random(30) = 0 then
      pu.Desc[7] := 1;  //¶³¾îÁöÁö ¾Ê´Â ¼Ó¼º
   pu.Desc[8] := 1;  //¹ÌÁöÀÇ ¼Ó¼º

   //Âø¿ë ÇÊ¿äÄ¡°¡ ºÙÀ½
   if sum >= 3 then begin
      if (pu.Desc[0] >= 5) then begin //¹æ¾î°¡ Å­
         pu.Desc[5] := 1; //ÇÊÆÄ
         pu.Desc[6] := 25 + pu.Desc[0] * 3;
         exit;
      end;
      if (pu.Desc[2] >= 2) then begin //ÆÄ±«°¡ Å­
         pu.Desc[5] := 1; //ÇÊÆÄ
         pu.Desc[6] := 35 + pu.Desc[2] * 4;
         exit;
      end;
      if (pu.Desc[3] >= 2) then begin //¸¶·Â Å­
         pu.Desc[5] := 2; //ÇÊ¸¶
         pu.Desc[6] := 18 + pu.Desc[3] * 2;
         exit;
      end;
      if (pu.Desc[4] >= 2) then begin //µµ·Â Å­
         pu.Desc[5] := 3; //ÇÊµµ
         pu.Desc[6] := 18 + pu.Desc[4] * 2;
         exit;
      end;
      pu.Desc[6] := 18 + sum * 2;
   end;
end;

//¹ÌÁöÀÇ ¾ÆÀÌÅÛ (¹ÝÁö)

procedure TItemUnit.RandomSetUnknownRing (pu: PTUserItem);
var
   i, n, up, sum: integer;
begin
   //ÆÄ±«
//   up := GetUpgrade (3, 4) + GetUpgrade (3, 8) + GetUpgrade (6, 20);
   up := GetUpgrade2 (12, 13) + GetUpgrade2 (12, 13);
   if up > 0 then pu.Desc[2] := up; //DC
   sum := up;

   //¸¶·Â
//   up := GetUpgrade (3, 4) + GetUpgrade (3, 8) + GetUpgrade (6, 20);
   up := GetUpgrade2 (12, 13) + GetUpgrade2 (12, 13);
   if up > 0 then pu.Desc[3] := up; //MC
   sum := sum + up;

   //µµ·Â
//   up := GetUpgrade (3, 4) + GetUpgrade (3, 8) + GetUpgrade (6, 20);
   up := GetUpgrade2 (12, 13) + GetUpgrade2 (9, 10);
   if up > 0 then pu.Desc[4] := up; //SC
   sum := sum + up;

   //³»±¸
   up := GetUpgrade (6, 30);
   if up > 0 then begin //³»±¸¼º ¾÷±×·¹ÀÌµå
      n := (1+up)*1000;
      pu.DuraMax := _MIN(65000, integer(pu.DuraMax) + n);
      pu.Dura := _MIN(65000, integer(pu.Dura) + n);
   end;

   //¶³¾îÁöÁö ¾Ê´Â ¾ÆÀÌÅÛ
   if Random(30) = 0 then
      pu.Desc[7] := 1;  //¶³¾îÁöÁö ¾Ê´Â ¼Ó¼º
   pu.Desc[8] := 1;  //¹ÌÁöÀÇ ¼Ó¼º

   //Âø¿ë ÇÊ¿äÄ¡°¡ ºÙÀ½
   if sum >= 3 then begin
      if (pu.Desc[2] >= 3) then begin //ÆÄ±«°¡ Å­
         pu.Desc[5] := 1; //ÇÊÆÄ
         pu.Desc[6] := 25 + pu.Desc[2] * 3;
         exit;
      end;
      if (pu.Desc[3] >= 3) then begin //¸¶·Â°¡ Å­
         pu.Desc[5] := 2; //ÇÊ¸¶
         pu.Desc[6] := 18 + pu.Desc[3] * 2;
         exit;
      end;
      if (pu.Desc[4] >= 3) then begin //µµ·Â°¡ Å­
         pu.Desc[5] := 3; //ÇÊµµ
         pu.Desc[6] := 18 + pu.Desc[4] * 2;
         exit;
      end;
      pu.Desc[6] := 18 + sum * 2;
   end;
end;

//¹ÌÁöÀÇ ¾ÆÀÌÅÛ ÆÈÂî

procedure TItemUnit.RandomSetUnknownBracelet (pu: PTUserItem);
var
   i, n, up, sum: integer;
begin
   //¹æ¾î
//   up := GetUpgrade (3, 5) + GetUpgrade (5, 20);
   up := GetUpgrade2 (12, 13);
   if up > 0 then pu.Desc[0] := up; //AC
   sum := up;

   //¸¶Ç×
//   up := GetUpgrade (3, 5) + GetUpgrade (5, 20);
   up := GetUpgrade2 (9, 10);
   if up > 0 then pu.Desc[1] := up; //MAC
   sum := sum + up;

   //ÆÄ±«
//   up := GetUpgrade (3, 15) + GetUpgrade (5, 30);
   up := GetUpgrade2 (6, 7) + GetUpgrade2 (6, 7);
   if up > 0 then pu.Desc[2] := up; //DC
   sum := sum + up;

   //¸¶¹ý
//   up := GetUpgrade (3, 15) + GetUpgrade (5, 30);
   up := GetUpgrade2 (6, 7) + GetUpgrade2 (6, 7);
   if up > 0 then pu.Desc[3] := up; //MC
   sum := sum + up;

   //µµ·Â
//   up := GetUpgrade (3, 15) + GetUpgrade (5, 30);
   up := GetUpgrade2 (6, 7) + GetUpgrade2 (6, 7);
   if up > 0 then pu.Desc[4] := up; //SC
   sum := sum + up;

   //³»±¸
   up := GetUpgrade (6, 30);
   if up > 0 then begin  //³»±¸
      n := (1+up)*1000;
      pu.DuraMax := _MIN(65000, integer(pu.DuraMax) + n);
      pu.Dura := _MIN(65000, integer(pu.Dura) + n);
   end;

   //¶³¾îÁöÁö ¾Ê´Â ¾ÆÀÌÅÛ
   if Random(30) = 0 then
      pu.Desc[7] := 1;  //¶³¾îÁöÁö ¾Ê´Â ¼Ó¼º
   pu.Desc[8] := 1;  //¹ÌÁöÀÇ ¼Ó¼º

   //Âø¿ë ÇÊ¿äÄ¡°¡ ºÙÀ½
   if sum >= 2 then begin
      if (pu.Desc[0] >= 3) then begin //¹æ¾î°¡ Å­
         pu.Desc[5] := 1; //ÇÊÆÄ
         pu.Desc[6] := 25 + pu.Desc[0] * 3;
         exit;
      end;
      if (pu.Desc[2] >= 2) then begin //ÆÄ±«°¡ Å­
         pu.Desc[5] := 1; //ÇÊÆÄ
         pu.Desc[6] := 30 + pu.Desc[2] * 3;
         exit;
      end;
      if (pu.Desc[3] >= 2) then begin //¸¶·Â°¡ Å­
         pu.Desc[5] := 2; //ÇÊ¸¶
         pu.Desc[6] := 20 + pu.Desc[3] * 2;
         exit;
      end;
      if (pu.Desc[4] >= 2) then begin //µµ·Â°¡ Å­
         pu.Desc[5] := 3; //ÇÊµµ
         pu.Desc[6] := 20 + pu.Desc[4] * 2;
         exit;
      end;
      pu.Desc[6] := 18 + sum * 2;
   end;
end;


//¾÷±×·¡ÀÌµÈ °ªÀ» Àû¿ëÇÑ stditem°ªÀ» ¸®ÅÏ
//std + pu = std
function TItemUnit.GetUpgradeStdItem (ui: TUserItem; var std: TStdItem) : integer;
var
   UCount  : integer;
begin
   UCount := 0;
   case std.StdMode of
      5,6: //¹«±â
      begin
         std.DC := MakeWord (Lobyte(std.DC), _MIN(255, Hibyte(std.DC) + ui.Desc[0]));
         std.MC := MakeWord (Lobyte(std.MC), _MIN(255, Hibyte(std.MC) + ui.Desc[1]));
         std.SC := MakeWord (Lobyte(std.SC), _MIN(255, Hibyte(std.SC) + ui.Desc[2]));
         //3:Çà¿î, 4:ÀúÁÖ, 5:Á¤È®, 6:°ø°Ý¼Óµµ
         std.AC := MakeWord (Lobyte(std.AC) + ui.Desc[3], Hibyte(std.AC) + ui.Desc[5]);  //Çà¿î, Á¤È®
         std.MAC:= MakeWord (Lobyte(std.MAC) + ui.Desc[4], Hibyte(std.MAC));  //ÀúÁÖ

         //°ø¼Ó°ªÀ» ¾ò¾î¿È.
         std.MAC:= MAKEWORD( LOBYTE(std.MAC), GetAttackSpeed( HIBYTE(std.MAC), ui.Desc[6] ) );

{
         //°ø¼ÓÀÌ 10º¸´Ù ÀÛÀ» ¶§¸¦ À§ÇÑ Ã³¸®.
         if HiByte(std.MAC) > 10 then begin
            std.Mac:= MakeWord (Lobyte(std.MAC), Hibyte(std.MAC) + ui.Desc[6]);  //°ø°Ý¼Óµµ(-/+)
         end else begin
            if Hibyte(std.MAC) >= ui.Desc[6] then
               std.Mac:= MakeWord (Lobyte(std.MAC), ABS( ui.Desc[6] - Hibyte(std.MAC) ))  //°ø°Ý¼Óµµ(-/+)
            else
               std.Mac:= MakeWord (Lobyte(std.MAC), ABS( ui.Desc[6] - Hibyte(std.MAC) ) + 10);  //°ø°Ý¼Óµµ(-/+)
         end;
}

         if ui.Desc[7] in [1..10] then begin
            // ½Å¼ºÀÌ ºÙ¾î ÀÖÀ¸¸é °­µµ¸¦ º¸¿©ÁÖÁö ¾Ê´Â´Ù(sonmg 2005/02/16)
            if std.SpecialPwr >= 0 then
               std.SpecialPwr := ui.Desc[7]; //¹«±âÀÇ °­µµ¸¦ ³ªÅ¸³¿
         end;
         if ui.Desc[10] <> 0 then
            std.ItemDesc := std.ItemDesc or IDC_UNIDENTIFIED;//$01;

         std.Slowdown := std.Slowdown + ui.Desc[12];
         std.Tox := std.Tox + ui.Desc[13];

         if ui.Desc[0] > 0 then inc ( UCount );
         if ui.Desc[1] > 0 then inc ( UCount );
         if ui.Desc[2] > 0 then inc ( UCount );
         if ui.Desc[3] > 0 then inc ( UCount );
         if ui.Desc[4] > 0 then inc ( UCount );
         if ui.Desc[5] > 0 then inc ( UCount );
         if ui.Desc[6] > 0 then inc ( UCount );
         if ui.Desc[7] > 0 then inc ( UCount );
         if ui.Desc[12] > 0 then inc ( UCount );
         if ui.Desc[13] > 0 then inc ( UCount );


      end;
      10,11: //¿Ê
      begin
         std.AC  := MakeWord (Lobyte(std.AC), _MIN(255, Hibyte(std.AC) + ui.Desc[0]));
         std.MAC := MakeWord (Lobyte(std.MAC),_MIN(255, Hibyte(std.MAC)+ ui.Desc[1]));
         std.DC  := MakeWord (Lobyte(std.DC), _MIN(255, Hibyte(std.DC) + ui.Desc[2]));
         std.MC  := MakeWord (Lobyte(std.MC), _MIN(255, Hibyte(std.MC) + ui.Desc[3]));
         std.SC  := MakeWord (Lobyte(std.SC), _MIN(255, Hibyte(std.SC) + ui.Desc[4]));
         //added by sonmg
         std.Agility  := std.Agility + ui.Desc[11];
         std.MgAvoid := std.MgAvoid + ui.Desc[12];
         std.ToxAvoid := std.ToxAvoid + ui.Desc[13];

         if ui.Desc[0] > 0 then inc ( UCount );
         if ui.Desc[1] > 0 then inc ( UCount );
         if ui.Desc[2] > 0 then inc ( UCount );
         if ui.Desc[3] > 0 then inc ( UCount );
         if ui.Desc[4] > 0 then inc ( UCount );
         if ui.Desc[11] > 0 then inc ( UCount );
         if ui.Desc[12] > 0 then inc ( UCount );
         if ui.Desc[13] > 0 then inc ( UCount );

      end;
      15: //Åõ±¸(added by sonmg)
      begin
         std.AC  := MakeWord (Lobyte(std.AC), _MIN(255, Hibyte(std.AC) + ui.Desc[0]));
         std.MAC := MakeWord (Lobyte(std.MAC),_MIN(255, Hibyte(std.MAC)+ ui.Desc[1]));
         std.DC  := MakeWord (Lobyte(std.DC), _MIN(255, Hibyte(std.DC) + ui.Desc[2]));
         std.MC  := MakeWord (Lobyte(std.MC), _MIN(255, Hibyte(std.MC) + ui.Desc[3]));
         std.SC  := MakeWord (Lobyte(std.SC), _MIN(255, Hibyte(std.SC) + ui.Desc[4]));
         //added by sonmg
         std.Accurate  := std.Accurate + ui.Desc[11];
         std.MgAvoid := std.MgAvoid + ui.Desc[12];
         std.ToxAvoid := std.ToxAvoid + ui.Desc[13];

         if ui.Desc[5] > 0 then  //ÇÊ¿ä(·¾,ÆÄ±«,¸¶¹ý,µµ·Â)
            std.Need := ui.Desc[5];
         if ui.Desc[6] > 0 then
            std.NeedLevel := ui.Desc[6];
         //if ui.Desc[7] > 0 then begin // : ¶³¾îÁöÁö ¾Ê´Â ¼Ó¼º
         //   std.ItemDesc := std.ItemDesc or IDC_UNABLETAKEOFF;  //ºÒÇÊ¿ä
         //end;
         //if ui.Desc[8] > 0 then begin // : ¹ÌÁöÀÇ¼Ó¼º ¾ÆÀÌÅÛÀÇ ´É·ÂÄ¡°¡ º¸ÀÌÁö ¾ÊÀ½
         //   std.ItemDesc := std.ItemDesc or IDC_UNIDENTIFIED;   //ºÒÇÊ¿ä
         //end;

         if ui.Desc[0] > 0 then inc ( UCount );
         if ui.Desc[1] > 0 then inc ( UCount );
         if ui.Desc[2] > 0 then inc ( UCount );
         if ui.Desc[3] > 0 then inc ( UCount );
         if ui.Desc[4] > 0 then inc ( UCount );
         if ui.Desc[11] > 0 then inc ( UCount );
         if ui.Desc[12] > 0 then inc ( UCount );
         if ui.Desc[13] > 0 then inc ( UCount );

      end;
      19,20,21: //¸ñ°ÉÀÌ
      begin
         std.AC  := MakeWord (Lobyte(std.AC), _MIN(255, Hibyte(std.AC) + ui.Desc[0]));
         std.MAC := MakeWord (Lobyte(std.MAC),_MIN(255, Hibyte(std.MAC)+ ui.Desc[1]));
         std.DC  := MakeWord (Lobyte(std.DC), _MIN(255, Hibyte(std.DC) + ui.Desc[2]));
         std.MC  := MakeWord (Lobyte(std.MC), _MIN(255, Hibyte(std.MC) + ui.Desc[3]));
         std.SC  := MakeWord (Lobyte(std.SC), _MIN(255, Hibyte(std.SC) + ui.Desc[4]));
         //added by sonmg
         std.AtkSpd  := std.AtkSpd + ui.Desc[9];
         std.Undead := std.Undead + ui.Desc[10];   //PAIN ½Ã¸®Áî
         std.Slowdown := std.Slowdown + ui.Desc[12];
         std.Tox := std.Tox + ui.Desc[13];

         if std.StdMode = 19 then
            std.Accurate := std.Accurate + ui.Desc[11]
         else if std.StdMode = 20 then
            std.MgAvoid := std.MgAvoid + ui.Desc[11]
         else if std.StdMode = 21 then begin
            std.Accurate := std.Accurate + ui.Desc[11];
            std.MgAvoid := std.MgAvoid + ui.Desc[7];  // 7¹øÀ» »ç¿ë ¾ÈÇÏ³ª?(sonmg)
         end;

         if ui.Desc[5] > 0 then  //ÇÊ¿ä(·¾,ÆÄ±«,¸¶¹ý,µµ·Â)
            std.Need := ui.Desc[5];
         if ui.Desc[6] > 0 then
            std.NeedLevel := ui.Desc[6];
         //if ui.Desc[7] > 0 then begin // : ¶³¾îÁöÁö ¾Ê´Â ¼Ó¼º
         //   std.ItemDesc := std.ItemDesc or IDC_UNABLETAKEOFF;  //ºÒÇÊ¿ä
         //end;
         //if ui.Desc[8] > 0 then begin // : ¹ÌÁöÀÇ¼Ó¼º ¾ÆÀÌÅÛÀÇ ´É·ÂÄ¡°¡ º¸ÀÌÁö ¾ÊÀ½
         //   std.ItemDesc := std.ItemDesc or IDC_UNIDENTIFIED;   //ºÒÇÊ¿ä
         //end;

         if ui.Desc[0] > 0 then inc ( UCount );
         if ui.Desc[1] > 0 then inc ( UCount );
         if ui.Desc[2] > 0 then inc ( UCount );
         if ui.Desc[3] > 0 then inc ( UCount );
         if ui.Desc[4] > 0 then inc ( UCount );
         if ui.Desc[9] > 0 then inc ( UCount );
         if ui.Desc[11] > 0 then inc ( UCount );
         if ui.Desc[12] > 0 then inc ( UCount );
         if ui.Desc[13] > 0 then inc ( UCount );

      end;
      22,23: //¹ÝÁö
      begin
         std.AC  := MakeWord (Lobyte(std.AC), _MIN(255, Hibyte(std.AC) + ui.Desc[0]));
         std.MAC := MakeWord (Lobyte(std.MAC),_MIN(255, Hibyte(std.MAC)+ ui.Desc[1]));
         std.DC  := MakeWord (Lobyte(std.DC), _MIN(255, Hibyte(std.DC) + ui.Desc[2]));
         std.MC  := MakeWord (Lobyte(std.MC), _MIN(255, Hibyte(std.MC) + ui.Desc[3]));
         std.SC  := MakeWord (Lobyte(std.SC), _MIN(255, Hibyte(std.SC) + ui.Desc[4]));
         //added by sonmg
         std.AtkSpd  := std.AtkSpd + ui.Desc[9];
         std.Undead := std.Undead + ui.Desc[10];   //PAIN ½Ã¸®Áî
         std.Slowdown := std.Slowdown + ui.Desc[12];
         std.Tox := std.Tox + ui.Desc[13];

         if ui.Desc[5] > 0 then  //ÇÊ¿ä(·¾,ÆÄ±«,¸¶¹ý,µµ·Â)
            std.Need := ui.Desc[5];
         if ui.Desc[6] > 0 then
            std.NeedLevel := ui.Desc[6];
         //if ui.Desc[7] > 0 then begin // : ¶³¾îÁöÁö ¾Ê´Â ¼Ó¼º
         //   std.ItemDesc := std.ItemDesc or IDC_UNABLETAKEOFF;  //ºÒÇÊ¿ä
         //end;
         //if ui.Desc[8] > 0 then begin // : ¹ÌÁöÀÇ¼Ó¼º ¾ÆÀÌÅÛÀÇ ´É·ÂÄ¡°¡ º¸ÀÌÁö ¾ÊÀ½
         //   std.ItemDesc := std.ItemDesc or IDC_UNIDENTIFIED;   //ºÒÇÊ¿ä
         //end;

         if ui.Desc[0] > 0 then inc ( UCount );
         if ui.Desc[1] > 0 then inc ( UCount );
         if ui.Desc[2] > 0 then inc ( UCount );
         if ui.Desc[3] > 0 then inc ( UCount );
         if ui.Desc[4] > 0 then inc ( UCount );
         if ui.Desc[9] > 0 then inc ( UCount );
         if ui.Desc[12] > 0 then inc ( UCount );
         if ui.Desc[13] > 0 then inc ( UCount );

      end;
      24: //ÆÈÂî24
      begin
         std.AC  := MakeWord (Lobyte(std.AC), _MIN(255, Hibyte(std.AC) + ui.Desc[0]));
         std.MAC := MakeWord (Lobyte(std.MAC),_MIN(255, Hibyte(std.MAC)+ ui.Desc[1]));
         std.DC  := MakeWord (Lobyte(std.DC), _MIN(255, Hibyte(std.DC) + ui.Desc[2]));
         std.MC  := MakeWord (Lobyte(std.MC), _MIN(255, Hibyte(std.MC) + ui.Desc[3]));
         std.SC  := MakeWord (Lobyte(std.SC), _MIN(255, Hibyte(std.SC) + ui.Desc[4]));

         if ui.Desc[5] > 0 then  //ÇÊ¿ä(·¾,ÆÄ±«,¸¶¹ý,µµ·Â)
            std.Need := ui.Desc[5];
         if ui.Desc[6] > 0 then
            std.NeedLevel := ui.Desc[6];
         //if ui.Desc[7] > 0 then begin // : ¶³¾îÁöÁö ¾Ê´Â ¼Ó¼º
         //   std.ItemDesc := std.ItemDesc or IDC_UNABLETAKEOFF;  //ºÒÇÊ¿ä
         //end;
         //if ui.Desc[8] > 0 then begin // : ¹ÌÁöÀÇ¼Ó¼º ¾ÆÀÌÅÛÀÇ ´É·ÂÄ¡°¡ º¸ÀÌÁö ¾ÊÀ½
         //   std.ItemDesc := std.ItemDesc or IDC_UNIDENTIFIED;   //ºÒÇÊ¿ä
         //end;

         if ui.Desc[0] > 0 then inc ( UCount );
         if ui.Desc[1] > 0 then inc ( UCount );
         if ui.Desc[2] > 0 then inc ( UCount );
         if ui.Desc[3] > 0 then inc ( UCount );
         if ui.Desc[4] > 0 then inc ( UCount );

      end;
      26: //ÆÈÂî26
      begin
         std.AC  := MakeWord (Lobyte(std.AC), _MIN(255, Hibyte(std.AC) + ui.Desc[0]));
         std.MAC := MakeWord (Lobyte(std.MAC),_MIN(255, Hibyte(std.MAC)+ ui.Desc[1]));
         std.DC  := MakeWord (Lobyte(std.DC), _MIN(255, Hibyte(std.DC) + ui.Desc[2]));
         std.MC  := MakeWord (Lobyte(std.MC), _MIN(255, Hibyte(std.MC) + ui.Desc[3]));
         std.SC  := MakeWord (Lobyte(std.SC), _MIN(255, Hibyte(std.SC) + ui.Desc[4]));

         //added by sonmg
         std.Undead := std.Undead + ui.Desc[10];   //PAIN ½Ã¸®Áî
         std.Accurate  := std.Accurate + ui.Desc[11];
         std.Agility  := std.Agility + ui.Desc[12];

         if ui.Desc[5] > 0 then  //ÇÊ¿ä(·¾,ÆÄ±«,¸¶¹ý,µµ·Â)
            std.Need := ui.Desc[5];
         if ui.Desc[6] > 0 then
            std.NeedLevel := ui.Desc[6];
         //if ui.Desc[7] > 0 then begin // : ¶³¾îÁöÁö ¾Ê´Â ¼Ó¼º
         //   std.ItemDesc := std.ItemDesc or IDC_UNABLETAKEOFF;  //ºÒÇÊ¿ä
         //end;
         //if ui.Desc[8] > 0 then begin // : ¹ÌÁöÀÇ¼Ó¼º ¾ÆÀÌÅÛÀÇ ´É·ÂÄ¡°¡ º¸ÀÌÁö ¾ÊÀ½
         //   std.ItemDesc := std.ItemDesc or IDC_UNIDENTIFIED;   //ºÒÇÊ¿ä
         //end;

         if ui.Desc[0] > 0 then inc ( UCount );
         if ui.Desc[1] > 0 then inc ( UCount );
         if ui.Desc[2] > 0 then inc ( UCount );
         if ui.Desc[3] > 0 then inc ( UCount );
         if ui.Desc[4] > 0 then inc ( UCount );
         if ui.Desc[11] > 0 then inc ( UCount );
         if ui.Desc[12] > 0 then inc ( UCount );

      end;
      52: //½Å¹ß(added by sonmg)
      begin
         std.AC  := MakeWord (Lobyte(std.AC), _MIN(255, Hibyte(std.AC) + ui.Desc[0]));
         std.MAC := MakeWord (Lobyte(std.MAC),_MIN(255, Hibyte(std.MAC)+ ui.Desc[1]));
         std.Agility := std.Agility + ui.Desc[3];

         if ui.Desc[0] > 0 then inc ( UCount );
         if ui.Desc[1] > 0 then inc ( UCount );
         if ui.Desc[3] > 0 then inc ( UCount );

      end;
      53: //¼öÈ£¼®(added by sonmg 2006/01/17)
      begin
         std.Undead := std.Undead + ui.Desc[10];   //PAIN ½Ã¸®Áî
      end;
      54: //º§Æ®(added by sonmg)
      begin
         std.AC  := MakeWord (Lobyte(std.AC), _MIN(255, Hibyte(std.AC) + ui.Desc[0]));
         std.MAC := MakeWord (Lobyte(std.MAC),_MIN(255, Hibyte(std.MAC)+ ui.Desc[1]));
         std.Accurate := std.Accurate + ui.Desc[2];
         std.Agility := std.Agility + ui.Desc[3];
         std.ToxAvoid := std.ToxAvoid + ui.Desc[13];

         if ui.Desc[0] > 0 then inc ( UCount );
         if ui.Desc[1] > 0 then inc ( UCount );
         if ui.Desc[2] > 0 then inc ( UCount );
         if ui.Desc[3] > 0 then inc ( UCount );
         if ui.Desc[13] > 0 then inc ( UCount );

      end;
   end;

   Result := UCount;
end;

// ¾ç¼ö °ø¼Ó°ªÀ» ½ÇÁ¦ °ø¼Ó(-10~15)°ªÀ¸·Î º¯È¯ÇØÁÖ´Â ÇÔ¼ö.
function TItemUnit.RealAttackSpeed( wAtkSpd: WORD ): integer;
begin
   if wAtkSpd <= 10 then
      Result := - wAtkSpd
   else
      Result := wAtkSpd - 10;
end;

// ½ÇÁ¦ °ø¼Ó(-10~15)°ªÀ» ¾ç¼ö °ø¼Ó°ªÀ¸·Î º¯È¯ÇØÁÖ´Â ÇÔ¼ö.
function TItemUnit.NaturalAttackSpeed( iAtkSpd: integer ): WORD;
begin
   if iAtkSpd <= 0 then
      Result := - iAtkSpd
   else
      Result := iAtkSpd + 10;
end;

// ¸®¼Ò½º¿Í À¯ÀúÀÇ ¾ç¼ö °ø¼Ó°ªÀ» ¹Þ¾Æ¼­ µÎ °ø¼ÓÀÇ ÇÕÀ» ¾ç¼ö °ø¼Ó°ªÀ¸·Î µ¹·ÁÁÖ´Â ÇÔ¼ö.
function TItemUnit.GetAttackSpeed( bStdAtkSpd, bUserAtkSpd: BYTE ): BYTE;
var
   iTemp: integer;
begin
   iTemp := RealAttackSpeed( bStdAtkSpd ) + RealAttackSpeed( bUserAtkSpd );

   Result := BYTE( NaturalAttackSpeed( iTemp ) );
end;

// ¸®¼Ò½º¿Í À¯ÀúÀÇ ¾ç¼ö °ø¼Ó°ªÀ» ¹Þ¾Æ¼­ ¾÷±×·¹ÀÌµå °ªÀ» ¹Ý¿µÇÏ¿© ¸®ÅÏÇÏ´Â ÇÔ¼ö.
// ¸®ÅÏ°ª : À¯ÀúÀÇ ¾ç¼ö °ø¼Ó°ª.
function TItemUnit.UpgradeAttackSpeed( bUserAtkSpd: BYTE; iUpValue: integer ): BYTE;
var
   iTemp: integer;
begin
   iTemp := RealAttackSpeed( bUserAtkSpd ) + iUpValue;

   Result := BYTE( NaturalAttackSpeed( iTemp ) );
end;


end.
